<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Identity Management</title>
  
    <section>
      <title>Overview</title>
      
      <para>
        PicketLink's Identity Management feature provides a rich and extensible API for managing the users, groups and roles of
        your applications and services. The <code>org.picketlink.idm.IdentityManager</code> interface declares all the methods required to
        create, update and delete Identity objects and create relationships between them such as group and role memberships.
      </para>
      
      <para>
        Interaction with the backend store that provides the persistent identity state is performed by configuring one or more
        <code>IdentityStore</code>s.  PicketLink provides a few built-in <code>IdentityStore</code> implementations for storing
        identity state in a database, file system or LDAP directory server, and it is possible to provide your own custom
        implementation to support storing your application's identity data in other backends.
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/identity_manager_stores.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/identity_manager_stores.png" align="center"/>
        </imageobject>
      </mediaobject> 
    </section>
    
    <section>
      <title>Identity Model</title>
      
      <para>
        PicketLink's identity model is based on a number of core interfaces that define the fundamental identity types
        upon which much of the Identity Management API is based.  The following class diagram shows the classes and interfaces
        in the <code>org.picketlink.idm.model</code> package that form the base identity model.
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/identitymodel.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/identitymodel.png" align="center"/>
        </imageobject>
      </mediaobject>      
      
      <itemizedlist>
        <listitem>
          <para>
            <code>AttributedType</code> is the base interface for the identity model.  It declares a number of methods for
            managing a set of attribute values, plus <code>getId()</code> and <code>setId()</code> methods for setting a 
            unique UUID value.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Attribute</code> is used to represent an attribute value.  An attribute has a name and a (generically typed) value,
            and may be marked as read-only.  Attribute values that are expensive to load (such as large binary data) may be lazy-loaded; 
            the <code>isLoaded()</code> method may be used to determine whether the Attribute has been loaded or not.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>IdentityType</code> is the base interface for Identity objects.  It declares properties that indicate whether the
            identity object is enabled or not, optional created and expiry dates, plus methods to read and set the owning 
            <code>Partition</code>.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Agent</code> represents a unique entity that may access the services secured by PicketLink.  In contrast to a user
            which represents a human, <code>Agent</code> is intended to represent a third party non-human (i.e. machine to machine) 
            process that may authenticate and interact with your application or services.  It declares methods for reading and setting
            the <code>Agent</code>'s login name.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>User</code> represents a human user that accesses your application and services.  In addition to the login name
            property defined by its parent interface <code>Agent</code>, the <code>User</code> interface declares a number of other
            methods for managing the user's first name, last name and e-mail address.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Group</code> is used to manage collections of identity types.  Each <code>Group</code> has a name and an optional
            parent group.
          </para>
        </listitem>
        
        <listitem>
          <para>
            <code>Role</code> is used in various relationship types to designate authority to another identity type to perform
            various operations within an application.  For example, a forum application may define a role called 
            <emphasis>moderator</emphasis> which may be assigned to one or more <code>User</code>s or <code>Group</code>s to indicate 
            that they are authorized to perform moderator functions.
          </para>
        </listitem>
      
      </itemizedlist>
      
      
    </section>
    
    <section>
      <title>Configuration</title>
      
      <para>
      </para>
    </section>
    
    <section>
      <title>Managing Users, Groups and Roles</title>
      
      <para>
        To perform any identity management operations, we start by injecting the <code>IdentityManager</code>:
      </para>
      
      <programlisting><![CDATA[@Inject IdentityManager identityManager;]]></programlisting>
  
      <para>
        PicketLink provides a number of basic implementations of the identity model interfaces for convenience.  The following
        sections provide examples that show these implementations in action.
      </para>
  
      <section>
        <title>Managing Users</title>
        
        <para>
          The following code example demonstrates how to create a new user with username "jsmith", first name of "John" and last
          name "Smith", with e-mail address "jsmith@acme.com".
        </para>
        
        <programlisting language="JAVA"><![CDATA[  User user = new SimpleUser("jsmith");
  user.setFirstName("John");
  user.setLastName("Smith");
  user.setEmail("jsmith@acme.com");
  identityManager.add(user);]]></programlisting>
  
        <para>
          Once the <code>User</code> is created, it's possible to look it up using its login name:
        </para>
        
        <programlisting><![CDATA[  User user = identityManager.getUser("jsmith");]]></programlisting>
        
        <para>
          User properties can also be modified after the User has already been created.  The following example demonstrates how
          to change the e-mail address of the user we created above:
        </para>
        
        <programlisting><![CDATA[ User user = identityManager.getUser("jsmith");
  user.setEmail("john@smith.com");
  identityManager.update(user);]]></programlisting>
  
        <para>
          Users can also be deleted.  The following example demonstrates how to delete the user we created previously:
        </para>
        
        <programlisting><![CDATA[  User user = identityManager.getUser("jsmith");
  identityManager.remove("jsmith");]]></programlisting>
        
      </section>
      
      <section>
        <title>Creating Groups</title>
        
        <para>
          The following example demonstrates how to create a new group called "employees":
        </para>
        
        <programlisting><![CDATA[  Group employees = new SimpleGroup("employees");]]></programlisting>
        
        <para>
          It is also possible to assign a parent group when creating a group.  The following example demonstrates how
          to create a new group called "managers", using the "employees" group created in the previous example as the
          parent group:
        </para>
        
        <programlisting><![CDATA[  Group managers = new SimpleGroup("managers", employees);]]></programlisting>
      </section>
    </section>
    
    <section>
      <title>Managing Relationships</title>
      
      <para>
        Relationships are used to model <emphasis>typed associations</emphasis> between two or more identities.
      </para>
      
      <section>
        <title>Built In Relationship Types</title>
        
        <para>
        
        </para>
        
        <section>
          <title>Overview</title>

            <mediaobject>
              <imageobject role="fo">
                <imagedata fileref="diagrams/grantclassdiagram.png" align="center" scalefit="1"/>
              </imageobject>
              <imageobject role="html">
                <imagedata fileref="diagrams/grantclassdiagram.png" align="center"/>
              </imageobject>
            </mediaobject> 
                
          <para>
          
          </para>
        </section>
        
        <section>
          <title>Grant</title>
          
          <para>
            A <code>Grant</code> relationship is used to assign a <code>Role</code> to an identity type such as a <code>User</code>
            or <code>Agent</code>.  It is typically used to represent an <emphasis>application role</emphasis>, in which an entity
            is granted the privilege to perform certain restricted operations within an application or service.
          </para>
          
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="diagrams/grant.png" align="center" scalefit="1"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="diagrams/grant.png" align="center"/>
            </imageobject>
          </mediaobject> 
          
          <para>
            The <code>IdentityManager</code> interface provides methods for directly creating a <code>Grant</code>.  Here's an example:
          </para>
          
          <programlisting><![CDATA[
            User bob = identityManager.getUser("bob");
            Role superuser = identityManager.getRole("superuser");
            identityManager.grantRole(bob, superuser);
          ]]></programlisting>
          
          <para>
            The above code is equivalent to the following:
          </para>
          
          <programlisting><![CDATA[
            User bob = identityManager.getUser("bob");
            Role superuser = identityManager.getRole("superuser");
            Grant grant = new Grant(bob, superuser);
            identityManager.add(grant);
          ]]></programlisting>
        </section>
      </section>
      
      <section>
        <title>Creating Custom Relationships</title>
      </section>
      
    </section>
    
    <section>
      <title>Realms and Tiers</title>
      
      <para>
        If you are using PicketLink in Standalone mode, or if your application follows the ASP (Application Service Provider) model
        then you may wish to partition your users, groups and roles into Realms and Tiers.
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/realm_tier.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/realm_tier.png" align="center"/>
        </imageobject>
      </mediaobject>   
    </section>

</chapter>
