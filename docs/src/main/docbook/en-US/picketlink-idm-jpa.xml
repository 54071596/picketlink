<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Identity Management - Working with JPA</title>

      <section>
        <title>JPAIdentityStoreConfiguration</title>

        <para>
          The JPA identity store uses a relational database to store identity state.  The configuration for this identity store
          provides control over which entity beans are used to store identity data, and how their fields should be used to store
          various identity-related state.  The entity beans that store the identity data must be configured using the 
          annotations found in the <code>org.picketlink.jpa.annotations</code> package.  All identity configuration annotations
          listed in the tables below are from this package.
        </para>
        
        <section>
          <title>Default Database Schema</title>
          
          <para>
            If you do not wish to provide your own JPA entities for storing IDM-related state, you may use the default schema
            provided by PicketLink in the <literal>picketlink-idm-simple-schema</literal> module.  This module contains a collection
            of entity beans suitable for use with <code>JPAIdentityStore</code>.  To use this module, add the following dependency
            to your Maven project's <literal>pom.xml</literal> file:
          </para>
          
          <programlisting language="XML"><![CDATA[<dependency>
    <groupId>org.picketlink</groupId>
    <artifactId>picketlink-idm-simple-schema</artifactId>
    <version>${picketlink.version}</version>
</dependency>]]></programlisting>

          <para>
            In addition to including the above dependency, the default schema entity beans must be configured in your application's
            <literal>persistence.xml</literal> file.  Add the following entries within the <literal>persistence-unit</literal> 
            section:
          </para>
          
          <programlisting language="XML"><![CDATA[<class>org.picketlink.idm.jpa.model.sample.simple.AttributedTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.AccountTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.RoleTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.GroupTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.IdentityTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.RelationshipTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.RelationshipIdentityTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.PartitionTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.PasswordCredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.DigestCredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.X509CredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.OTPCredentialTypeEntity</class>
<class>org.picketlink.idm.jpa.model.sample.simple.AttributeTypeEntity</class>
]]></programlisting>yes
        
        </section>

        <section>
          <title>Configuring an EntityManager</title>

          <para>
            Before the JPA identity store can be used, it must be provided with an <code>EntityManager</code> so that it can
            connect to a database.  In Java EE this can be done by providing a producer method within your application that 
            specifies the <code>@org.picketlink.annotations.PicketLink</code> qualifier, for example like so:
          </para>
              
          <programlisting language="JAVA"><![CDATA[@Produces
@PicketLink
@PersistenceContext(unitName = "picketlink")
private EntityManager picketLinkEntityManager;]]></programlisting>
        </section>

        <section>
          <title>Configuring the Identity class</title>

          <para>
            The Identity class is the entity bean that is used to store the record for users, roles and groups. It should
            be annotated with <code>@IdentityType</code> and declare the following field values:
          </para>

          <table>
            <title>Identity class fields</title>

            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>ID</entry>
                  <entry><code>@Identifier</code></entry>
                  <entry>The unique identifier value for the identity (can also double as the primary key value)</entry>
                </row>
                <row>
                  <entry>Discriminator</entry>
                  <entry><code>@Discriminator</code></entry>
                  <entry>Indicates the identity type (i.e. user, agent, group or role) of the identity.</entry>
                </row>
                <row>
                  <entry>Partition</entry>
                  <entry><code>@IdentityPartition</code></entry>
                  <entry>The partition (realm or tier) that the identity belongs to</entry>
                </row>
                <row>
                  <entry>Login name</entry>
                  <entry><code>@LoginName</code></entry>
                  <entry>The login name for agent and user identities (for other identity types this will be null)</entry>
                </row>
                <row>
                  <entry>Name</entry>
                  <entry><code>@IdentityName</code></entry>
                  <entry>The name for group and role identities (for other identity types this will be null)</entry>
                </row>
                <row>
                  <entry>First Name</entry>
                  <entry><code>@FirstName</code></entry>
                  <entry>The first name of a user identity</entry>
                </row>
                <row>
                  <entry>Last Name</entry>
                  <entry><code>@LastName</code></entry>
                  <entry>The last name of a user identity</entry>
                </row>
                <row>
                  <entry>E-mail</entry>
                  <entry><code>@Email</code></entry>
                  <entry>The primary e-mail address of a user identity</entry>
                </row>
                <row>
                  <entry>Enabled</entry>
                  <entry><code>@Enabled</code></entry>
                  <entry>Indicates whether the identity is enabled</entry>
                </row>
                <row>
                  <entry>Creation date</entry>
                  <entry><code>@CreationDate</code></entry>
                  <entry>The creation date of the identity</entry>
                </row>
                <row>
                  <entry>Expiry date</entry>
                  <entry><code>@ExpiryDate</code></entry>
                  <entry>The expiry date of the identity</entry>
                </row>
                <row>
                  <entry>Group parent</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent group (only used for Group identity types, for other types will be null)</entry>
                </row>
                <row>
                  <entry>Group path</entry>
                  <entry><code>@GroupPath</code></entry>
                  <entry>Represents the full group path (for Group identity types only)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
              
          <para>
            The following code shows an example of an entity class configured to store Identity instances:
          </para>
              
          <example>
            <title>Example Identity class</title>
            <programlisting language="JAVA"><![CDATA[@IdentityType
@Entity
public class IdentityObject implements Serializable {
    
    @Discriminator
    private String discriminator;

    @ManyToOne
    @IdentityPartition
    private PartitionObject partition;

    @Identifier
    @Id
    private String id;

    @LoginName
    private String loginName;

    @IdentityName
    private String name;

    @FirstName
    private String firstName;

    @LastName
    private String lastName;

    @Email
    private String email;

    @Enabled
    private boolean enabled;

    @CreationDate
    @Temporal(TemporalType.TIMESTAMP)
    private Date creationDate;

    @ExpiryDate
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDate;

    @ManyToOne
    @Parent
    private IdentityObject parent;

    @GroupPath
    private String groupPath;              
    
    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Configuring the Attribute class</title>

          <para>
            The Attribute class is used to store Identity attributes, and should be annotated with
            <code>@IdentityAttribute</code>
          </para>

          <table>
            <title>Attribute class fields</title>
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                  </row>
              </thead>
              <tbody>
                <row>
                  <entry>Identity</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent identity object to which the attribute value belongs</entry>
                </row>
                <row>
                  <entry>Name</entry>
                  <entry><code>@AttributeName</code></entry>
                  <entry>The name of the attribute</entry>
                </row>
                <row>
                  <entry>Value</entry>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>The value of the attribute</entry>
                </row>
                <row>
                  <entry>Type</entry>
                  <entry><code>@AttributeType</code></entry>
                  <entry>The fully qualified classname of the attribute value class</entry>
                </row>
              </tbody>
            </tgroup>
          </table>          

          <example>
            <title>Example Attribute class</title>
            <programlisting language="JAVA"><![CDATA[@Entity
@IdentityAttribute
public class IdentityAttribute implements Serializable {
    @Id @GeneratedValue private Long id;

    @ManyToOne @JoinColumn
    @Parent
    private IdentityObject identityObject;

    @AttributeName
    private String name;                

    @AttributeValue
    private String value;

    @AttributeType
    private String type;
    
    // getters and setters
}]]></programlisting>
          </example>
        </section>

        <section>
          <title>Configuring the Credential class</title>

          <para>
            The credential entity is used to store user credentials such as passwords and certificates, and should be annotated
            with <code>@IdentityCredential</code>.
          </para>

          <table>
            <title>Credential class fields</title>
                
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Type</entry>
                  <entry><code>@CredentialType</code></entry>
                  <entry>The fully qualified classname of the credential type</entry>
                </row>
                <row>
                  <entry>Value</entry>
                  <entry><code>@CredentialValue</code></entry>
                  <entry>The value of the credential</entry>
                </row>
                <row>
                  <entry>Effective Date</entry>
                  <entry><code>@EffectiveDate</code></entry>
                  <entry>The effective date of the credential</entry>
                </row>
                <row>
                  <entry>Expiry Date</entry>
                  <entry><code>@ExpiryDate</code></entry>
                  <entry>The expiry date of the credential</entry>
                </row>
                <row>
                  <entry>Identity</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent identity to which the credential belongs</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
              
          <example>
            <title>Example Credential class</title>
            <programlisting language="JAVA"><![CDATA[@Entity
@IdentityCredential
public class IdentityCredential implements Serializable {
    @Id @GeneratedValue private Long id;

    @CredentialType
    private String type;

    @CredentialValue
    private String credential;

    @EffectiveDate
    @Temporal (TemporalType.TIMESTAMP)
    private Date effectiveDate;

    @ExpiryDate
    @Temporal (TemporalType.TIMESTAMP)
    private Date expiryDate;

    @Parent
    @ManyToOne
    private IdentityObject identityType;
    
    // getters and setters
}]]></programlisting>
          </example>
        </section>
            
        <section>
          <title>Configuring the Credential Attribute class</title>
              
          <para>
            The Credential Attribute class is used to store arbitrary attribute values relating to the credential.  It
            should be annotated with <code>@CredentialAttribute</code>.
          </para>
              
          <table>
            <title>Credential Attribute class fields</title>
            
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Credential Object</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent credential to which this attribute belongs</entry>
                </row>
                <row>
                  <entry>Attribute Name</entry>
                  <entry><code>@AttributeName</code></entry>
                  <entry>The name of the attribute</entry>
                </row>
                <row>
                  <entry>Attribute Value</entry>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>The value of the attribute</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          
          <example>
            <title>Example Credential Attribute class</title>
            <programlisting language="JAVA"><![CDATA[@Entity
@CredentialAttribute
public class IdentityCredentialAttribute implements Serializable {
    @Id @GeneratedValue private Long id;

    @ManyToOne @JoinColumn
    @Parent
    private IdentityCredential credential;

    @AttributeName
    private String name;

    @AttributeValue
    private String value;
    
    // getters and setters
}]]></programlisting>
          </example>
              
        </section>
            
        <section>
          <title>Configuring the Relationship class</title>
              
          <para>
            Relationships are used to define typed associations between two or more identities.  The Relationship class should
            be annotated with <code>@Relationship</code>.
          </para>
              
          <table>
            <title>Relationship class fields</title>
            
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Identifier</entry>
                  <entry><code>@Identifier</code></entry>
                  <entry>Unique identifier that represents the specific relationship (can also double as the primary key)</entry>
                </row>
                <row>
                  <entry>Relationship Class</entry>
                  <entry><code>@RelationshipClass</code></entry>
                  <entry>The fully qualified class name of the relationship type</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          
          <example>
            <title>Example Relationship class</title>
            <programlisting language="JAVA"><![CDATA[@Relationship
@Entity
public class Relationship implements Serializable {
    @Id 
    @Identifier
    private String id;

    @RelationshipClass
    private String type;

    // getters and setters
}]]></programlisting>
          </example>
        </section>
            
        <section>
          <title>Configuring the Relationship Identity class</title>
              
          <para>
            The Relationship Identity class is used to store the specific identities that participate in a relationship. It
            should be annotated with <code>@RelationshipIdentity</code>.
          </para>
              
          <table>
            <title>Relationship Identity class fields</title>
            
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Relationship Descriptor</entry>
                  <entry><code>@Discriminator</code></entry>
                  <entry>Denotes the role of the identity in the relationship</entry>
                </row>
                <row>
                  <entry>Relationship Identity</entry>
                  <entry><code>@Identity</code></entry>
                  <entry>The identity that is participating in the relationship</entry>
                </row>
                <row>
                  <entry>Relationship</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent relationship object to which the relationship identity belongs</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          
          <example>
            <title>Example Relationship Identity class</title>
            <programlisting language="JAVA"><![CDATA[@RelationshipIdentity
@Entity
public class RelationshipIdentityObject implements Serializable {
    @Id @GeneratedValue private Long id;

    @Discriminator
    private String descriptor;

    @RelationshipIdentity
    @ManyToOne
    private IdentityObject identityObject;

    @Parent
    @ManyToOne
    private RelationshipObject relationshipObject;
    
    // getters and setters
}]]></programlisting>
          </example>
        </section>
            
        <section>
          <title>Configuring the Relationship Attribute class</title>
              
          <para>
            The Relationship Attribute class is used to store arbitrary attribute values that relate to a specific relationship.
            It should be annotated with <code>@RelationshipAttribute</code>.
          </para>
              
          <table>
            <title>Relationship Attribute class fields</title>
                
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Relationship</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent relationship object to which the attribute belongs</entry>
                </row>
                <row>
                  <entry>Attribute Name</entry>
                  <entry><code>@AttributeName</code></entry>
                  <entry>The name of the attribute</entry>
                </row>
                <row>
                  <entry>Attribute value</entry>
                  <entry><code>@AttributeValue</code></entry>
                  <entry>The value of the attribute</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
              
          <example>
            <title>Example Relationship Attribute class</title>
    
            <programlisting language="JAVA"><![CDATA[@Entity
@RelationshipAttribute
public class RelationshipObjectAttribute implements Serializable {
    @Id @GeneratedValue private Long id;

    @ManyToOne @JoinColumn
    @Parent
    private Relationship relationship;

    @AttributeName
    private String name;

    @RelationshipValue
    private String value;
    
    // getters and setters
}]]></programlisting>
          </example>
        </section>
            
        <section>
          <title>Configuring the Partition class</title>
              
          <para>
            The Partition class is used to store information about partitions, i.e. Realms and Tiers.  It should be 
            annotated with <code>@Partition</code>.
          </para>
          
          <table>
            <title>Partition class fields</title>
            
            <tgroup cols="3" align="left">
              <thead>
                <row>
                  <entry>Property</entry>
                  <entry>Annotation</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>ID</entry>
                  <entry><code>@Identifier</code></entry>
                  <entry>The unique identifier value for the partition</entry>
                </row>
                <row>
                  <entry>Type</entry>
                  <entry><code>@Discriminator</code></entry>
                  <entry>The type of partition, either Realm or Tier</entry>
                </row>
                <row>
                  <entry>Parent</entry>
                  <entry><code>@Parent</code></entry>
                  <entry>The parent partition (only used for Tiers)</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <example>
            <title>Example Partition class</title>
            <programlisting language="JAVA"><![CDATA[@Entity
@Partition
public class PartitionObject implements Serializable {
    @Id @Identifier
    private String id;

    @Discriminator
    private String type;

    @ManyToOne 
    @Parent
    private PartitionObject parent;
    
    // getters and setters
}]]></programlisting>
          </example>
        </section>
        <section>
          <title>Providing a <code>EntityManager</code></title>
        	<para>
        		Sometimes you may need to configure how the <code>EntityManager</code> is provided to the <code>JPAIdentityStore</code>, like when your application is using CDI and you must run the operations
        		in the scope of the current transaction by using a injected <code>EntityManager</code> instance.
        	</para>
        	<para>
        		In cases like that, you need to initialize the <code>SecurityContext</code> by providing a <code>ContextInitializer</code> implementation, as discussed in <link linkend='idm_security_context_configuration'>Security Context Configuration</link>. 
        		The <code>JPAContextInitializer</code> is provided by PicketLink and can be used to initialize the security context with a specific <code>EntityManager</code> instance.
        		You can always extend this class and provide your own way to obtain the <code>EntityManager</code> from your application's environment.
        	</para>
          <programlisting language="JAVA"><![CDATA[IdentityConfigurationBuilder builder = new IdentityConfigurationBuilder();

builder
  .stores()
    .file()
      .addContextInitializer(new JPAContextInitializer(emf) {
        @Override
        public EntityManager getEntityManager() {
          // logic goes here
        }
      });
}]]></programlisting>
					<para>
						By default, the <code>JPAContextInitializer</code> creates a <code>EntityManager</code> from the <code>EntityManagerFacatory</code> provided when creating a new instance.
					</para>
        </section>
      </section>

</chapter>
