<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Authentication</title>
  
    <section>
      <title>Overview</title>
      
      <para>
        Authentication is the act of verifying the identity of a user.  PicketLink offers an extensible authentication API
        that allows for significant customization of the authentication process, while also providing sensible defaults
        for developers that wish to get up and running quickly.  It also supports both synchronous and asynchronous
        user authentication, allowing for both a traditional style of authentication (such as logging in with a username
        and password), or alternatively allowing authentication via a federated identity service, such as OpenID, SAML or OAuth.  
        This chapter will endeavour to describe the authentication API and the authentication process in detail.
      </para>
    </section>
    
    <section>
      <title>The Authentication API</title>
      
      <para>
        The <code>Identity</code> bean (which can be found in the <code>org.picketlink</code> package) is central to PicketLink's
        security API.  This bean represents the authenticated user for the current session, and provides many useful methods for
        controlling the authentication process and querying the user's assigned privileges.  In terms of authentication, the
        <code>Identity</code> bean provides the following methods:
      </para>
      
      <programlisting language="JAVA"><![CDATA[AuthenticationResult login();

void logout();      

boolean isLoggedIn();

Agent getUser();]]></programlisting>
           
      <para>
        The <code>login()</code> method is the <emphasis>primary</emphasis> point of entry for the authentication process. Invoking
        this method will cause PicketLink to attempt to authenticate the user based on the credentials that they have provided.
        The <code>AuthenticationResult</code> type returned by the <code>login()</code> method is a simple enum that defines the
        following two values:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public enum AuthenticationResult {
    SUCCESS, FAILED
}]]></programlisting>

      <para>
        If the authentication process is successful, the <code>login()</code> method will return a result of <code>SUCCESS</code>,
        otherwise it will return a result of <code>FAILED</code>.  By default, the <code>Identity</code> bean is session-scoped,
        which means that once a user is authenticated they will stay authenticated for the duration of the session.  
      </para>

      <note>
        <para>
          An important point to note is that the <code>Identity</code> bean is annotated with the CDI <code>@Named</code> annotation, 
          which means that its methods may be invoked directly from the view layer (if the view layer, such as JSF, supports it) via an 
          EL expression.</para>      
      </note>
      
      <para>
        One possible way to control the authentication process is by using an action bean, for example the following code might be
        used in a JSF application:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public @RequestScoped @Named class LoginAction {

    @Inject Identity identity;

    public void login() {
        AuthenticationResult result = identity.login();
        if (AuthenticationResult.FAILED.equals(result)) {
            FacesContext.getCurrentInstance().addMessage(null, 
                new FacesMessage(
                        "Authentication was unsuccessful.  Please check your username and password " +
                        "before trying again."));
        }
    }
}]]></programlisting>      

      <para>
        In the above code, the <code>Identity</code> bean is injected into the action bean via the CDI <code>@Inject</code> 
        annotation.  The <code>login()</code> method
        is essentially a wrapper method that delegates to <code>Identity.login()</code> and stores the authentication result in 
        a variable.  If authentication was unsuccessful, a <code>FacesMessage</code> is created to let the user know that
        their login failed.  Also, since the bean is <code>@Named</code> it can be invoked directly from a JSF control like so:
      </para>
      
      <programlisting language="XML"><![CDATA[<h:commandButton value="LOGIN" action="#{loginAction.login}"/>]]></programlisting>
      
      <para>
        The <code>isLoggedIn()</code> method may be used to determine whether there is a user logged in for the current session.
        It is typically used as an authorization check to control either an aspect of the user interface (for example, not
        displaying a menu item if the user isn't logged in), or to restrict certain business logic.  While logged in, 
        the <code>getUser()</code> method can be used to retrieve the currently authenticated user.  If there is none, then 
        <code>getUser()</code> will return <code>null</code>.  The following example shows both the <code>isLoggedIn()</code> 
        and <code>getUser()</code> methods being used inside a JSF page:
      </para>
      
      <programlisting language="XML"><![CDATA[<ui:fragment rendered="#{identity.loggedIn}">Welcome, #{identity.user.loginName}]]></programlisting>
      
      <note>
        <para>
          Don't worry that the <code>getUser()</code> method returns an <code>Agent</code> object - <code>Agent</code> is actually 
          the superclass of <code>User</code>, and represents a non-human entity (while <code>User</code> represents a human entity).
        </para>
      </note>      
      
      <para>
        The <code>logout()</code> method allows the user to log out, thereby clearing the authentication state for their session.  
        Also, if the user's session expires (for example due to inactivity) their authentication state will also be lost 
        requiring the user to authenticate again.
      </para>
      
      <para>
        The following JSF code example demonstrates how to render a log out button when the current user is logged in:
      </para>
      
      <programlisting language="XML"><![CDATA[<ui:fragment rendered="#{identity.loggedIn}">
    <h:form>
        <h:commandButton value="Log out" action="#{identity.logout}"/>
    </h:form>
</ui:fragment>]]></programlisting>
      
      <para>
        While it is the <code>Identity</code> bean that controls the overall authentication process, the actual authentication
        "business logic" is defined by the <code>Authenticator</code> interface:
      </para>
     
      <programlisting language="JAVA"><![CDATA[public interface Authenticator {
    public enum AuthenticationStatus {
        SUCCESS, 
        FAILURE, 
        DEFERRED
    }

    void authenticate();

    void postAuthenticate();

    AuthenticationStatus getStatus();

    Agent getUser();
}]]></programlisting>

      <para>
        During the authentication process, the <code>Identity</code> bean will invoke the methods of the <emphasis>active</emphasis>
        <code>Authenticator</code> (more on this in a moment) to perform user authentication.  The <code>authenticate()</code> method 
        is the most important of these, as it defines the actual authentication logic.  After <code>authenticate()</code> has been 
        invoked by the <code>Identity</code> bean, the <code>getStatus()</code> method will reflect the authentication status 
        (either <code>SUCCESS</code>, <code>FAILURE</code> or <code>DEFERRED</code>).  If the authentication process was a 
        success, the <code>getUser()</code> method will return the authenticated <code>User</code> object and the 
        <code>postAuthenticate()</code> method will be invoked also.  If the authentication was not a success, 
        <code>getUser()</code> will return <code>null</code>. 
      </para>
      
      <section>
        <title>Active Authenticator</title>
        
        <para>
          It is possible to have multiple <code>Authenticator</code> beans deployed in a single application, so the <code>Identity</code>
          bean must have a way of selecting the correct one for any authentication request.  This task is delegated to the
          <code>AuthenticatorSelector</code> bean, which defines the following methods:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public interface AuthenticatorSelector {
    Class<? extends Authenticator> getAuthenticatorClass();

    void setAuthenticatorClass(Class<? extends Authenticator> authenticatorClass);

    String getAuthenticatorName();

    void setAuthenticatorName(String authenticatorName);

    Authenticator getSelectedAuthenticator();
}]]></programlisting> 
          
        <para>
          The default <code>AuthenticatorSelector</code> implementation has a few simple rules to determine which 
          <code>Authenticator</code> implementation it should be using to carry out an authentication request. These rules are:
        </para>
        
        <itemizedlist>
          <listitem>
            <para>
              If the <code>authenticatorClass</code> property has been set, then the <code>Authenticator</code> bean with
              that exact type will be selected.
            </para>
          </listitem>
          <listitem>
            <para>
              Otherwise, if the <code>authenticatorName</code> property has been set, then the <code>Authenticator</code> bean
              with that bean name will be selected.
            </para>
          </listitem>
          <listitem>
            <para>
              If neither the <code>authenticatorClass</code> or <code>authenticatorName</code> properties have been set, and
              a single, custom (i.e. not provided by PicketLink) <code>Authenticator</code> bean is found then that one will
              be selected.
            </para>
          </listitem>
          <listitem>
            <para>
              If the user has not provided their own custom <code>Authenticator</code>, then use the built-in
              <code>IdmAuthenticator</code> (which will use the Identity Management API to authenticate).
            </para>
          </listitem>
        </itemizedlist>
        
        <para>
          As the default <code>AuthenticatorSelector</code> implementation is a request-scoped bean, it is possible to control
          <code>Authenticator</code> selection for every single authentication request.
        </para>
        
      </section>

    </section>
    
    <section>
      <title>The Authentication Process</title>
      
      <para>
        Now that we've looked at all the individual pieces, let's take a look at how they all work together to process an
        authentication request.  For starters, the following sequence diagram shows the class interaction that occurs during 
        a successful authentication:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/authentication_sequence.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/authentication_sequence.png" align="center"/>
        </imageobject>
      </mediaobject>     
      
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>1</emphasis> -
            The user invokes the <code>login()</code> method of the <code>Identity</code> bean.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1</emphasis> -
            The <code>Identity</code> bean (after performing a couple of validations) invokes its own <code>authenticate()</code>
            method.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.1</emphasis> - 
            The <code>Identity</code> bean invokes <code>AuthenticatorSelector.getSelectedAuthenticator()</code> to
            determine which <code>Authenticator</code> bean to use for the authentication request.
          </para>
        </listitem>
        <listitem>                
          <para>
            <emphasis>1.1.2</emphasis> - 
            Once the <code>Identity</code> bean has the correct <code>Authenticator</code>, it invokes its
            <code>authenticate()</code> method (which has a return value of <code>void</code>).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.3</emphasis> - 
            To determine whether authentication was successful, the <code>Identity</code> bean invokes the
            <code>Authenticator</code>'s <code>getStatus()</code> method, which returns a <code>SUCCESS</code>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.4</emphasis> - 
            Upon a successful authentication, the <code>Identity</code> bean then invokes the 
            <code>Authenticator</code>'s <code>postAuthenticate()</code> method to perform any post-authentication
            logic.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.5</emphasis> - 
            The <code>Identity</code> bean then invokes the <code>Authenticator</code>'s <code>getUser()</code> method,
            which returns a <code>User</code> object representing the authenticated user, which is then stored as a 
            private field in the <code>Identity</code> bean.
          </para>
        </listitem>
      </itemizedlist>     
      
    </section>

</chapter>
