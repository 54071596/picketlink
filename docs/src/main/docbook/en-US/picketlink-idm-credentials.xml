<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-idm-credentials">
  <title>Credential Validation and Management</title>
  
    <section>
      <title>Authentication</title>
      
      <note>
        <para>
          While the IDM module of PicketLink provides authentication features, for common use cases involving standard username and
          password based authentication in a Java EE environment, PicketLink provides a more streamlined method
          of authentication.  Please refer to <xref linkend="picketlink-authentication"/> for more information.
        </para>
      </note>
      
      <para>
        PicketLink IDM provides an authentication subsystem that allows user credentials to be validated thereby confirming
        that an authenticating user is who they claim to be.  The <code>IdentityManager</code> interface provides a single
        method for performing credential validation, as follows:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void validateCredentials(Credentials credentials);]]></programlisting>
      
      <para>
        The <code>validateCredentials()</code> method accepts a single <code>Credentials</code> parameter, which should
        contain all of the state required to determine who is attempting to authenticate, and the credential (such as a
        password, certificate, etc) that they are authenticating with.  Let's take a look at the <code>Credentials</code>
        interface:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public interface Credentials {
    public enum Status {
        UNVALIDATED, IN_PROGRESS, INVALID, VALID, EXPIRED
    };

   Account getValidatedAccount();
   
   Status getStatus();
   
   void invalidate();
}]]></programlisting>

      <itemizedlist>
        <listitem>
          <para>
            The <code>Status</code> enum defines the following values, which reflect the various credential states:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                <code>UNVALIDATED</code> - The credential is yet to be validated.
              </para>
            </listitem>
            <listitem>
              <para>
                <code>IN_PROGRESS</code> - The credential is in the process of being validated.
              </para>
            </listitem>
            <listitem>
              <para>
                <code>INVALID</code> - The credential has been validated unsuccessfully
              </para>
            </listitem>
            <listitem>
              <para>
                <code>VALID</code> - The credential has been validated successfully
              </para>
            </listitem>
            <listitem>
              <para>
                <code>EXPIRED</code> - The credential has expired
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            <code>getValidatedAccount()</code> - If the credential was successfully validated, this method returns the
            <code>Account</code> object representing the validated user.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>getStatus()</code> - Returns the current status of the credential, i.e. one of the above enum values.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>invalidate()</code> - Invalidate the credential.  Implementations of <code>Credential</code> should use
            this method to clean up internal credential state.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Let's take a look at a concrete example - <code>UsernamePasswordCredentials</code> is a <code>Credentials</code>
        implementation that supports traditional username/password-based authentication:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public class UsernamePasswordCredentials extends AbstractBaseCredentials {

    private String username;

    private Password password;

    public UsernamePasswordCredentials() { }

    public UsernamePasswordCredentials(String userName, Password password) {
        this.username = userName;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public UsernamePasswordCredentials setUsername(String username) {
        this.username = username;
        return this;
    }

    public Password getPassword() {
        return password;
    }

    public UsernamePasswordCredentials setPassword(Password password) {
        this.password = password;
        return this;
    }

    @Override
    public void invalidate() {
        setStatus(Status.INVALID);
        password.clear();
    }
}]]></programlisting>

      <para>
        The first thing we may notice about the above code is that the <code>UsernamePasswordCredentials</code> class extends
        <code>AbstractBaseCredentials</code>.  This abstract base class implements the basic functionality required by the 
        <code>Credentials</code> interface.  Next, we can see that two fields are defined; <code>username</code> and <code>password</code>.
        These fields are used to hold the username and password state, and can be set either via the constructor,
        or by their associated setter methods.  Finally, we can also see that the <code>invalidate()</code> method sets the status to
        <code>INVALID</code>, and also clears the password value.
      </para>
      
      <para>
        Let's take a look at an example of the above classes in action.  The following code demonstrates how we would authenticate
        a user with a username of "john" and a password of "abcde":
      </para>
      
      <programlisting language="JAVA"><![CDATA[Credentials creds = new UsernamePasswordCredentials("john",
    new Password("abcde"));
identityManager.validate(creds);
if (Status.VALID.equals(creds.getStatus())) {
  // authentication was successful
}]]></programlisting>
    
      <para>
        We can also test if the credentials that were provided have expired (if an expiry date was set).  In this case we might
        redirect the user to a form where they can enter a new password.
      </para>
      
      <programlisting language="JAVA"><![CDATA[Credentials creds = new UsernamePasswordCredentials("john",
    new Password("abcde"));
identityManager.validate(creds);
if (Status.EXPIRED.equals(creds.getStatus())) {
  // password has expired, redirect the user to a password change screen
}]]></programlisting>
      
    </section>

    <section>
      <title>Managing Credentials</title>
      
      <para>
        Updating user credentials is even easier than validating them.  The <code>IdentityManager</code> interface provides the following
        two methods for updating credentials:
      </para>
      
      <programlisting language="JAVA"><![CDATA[void updateCredential(Account account, Object credential);
void updateCredential(Account account, Object credential, Date effectiveDate, Date expiryDate);]]></programlisting>

      <para>
        Both of these methods essentially do the same thing; they update a credential value for a specified <code>Account</code>.
        The second overloaded method however also accepts <code>effectiveDate</code> and <code>expiryDate</code>
        parameters, which allow some temporal control over when the credential will be valid.  Use cases for this feature 
        include implementing a strict password expiry policy (by providing an expiry date), or creating a new account that might not 
        become active until a date in the future (by providing an effective date).  Invoking the first overloaded method will
        store the credential with an effective date of the current date and time, and no expiry date.
      </para>

      <note>      
        <para>
          One important point to note is that the <code>credential</code> parameter is of type <code>java.lang.Object</code>.  Since
          credentials can come in all shapes and sizes (and may even be defined by third party libraries), there is no common base 
          interface for credential implementations to extend.  To support this type of flexibility in an extensible way, PicketLink 
          provides an SPI that allows custom credential handlers to be configured that override or extend the default credential 
          handling logic.  Please see the next section for more information on how this SPI may be used.
        </para>
      </note>
      
      <para>
        PicketLink provides built-in support for the following credential types:
      </para>
      
      <warning>
        <para>
          Not all built-in <code>IdentityStore</code> implementations support all credential types.  For example, since the
          <code>LDAPIdentityStore</code> is backed by an LDAP directory server, only password credentials are supported.  The
          following table lists the built-in <code>IdentityStore</code> implementations that support each credential type.
        </para>
      </warning>
      
      <table>
        <title>Built-in credential types</title>
        
        <tgroup cols="3" align="left">
          <thead>
            <row>
              <entry>Credential type</entry>
              <entry>Description</entry>
              <entry>Supported by</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><code>org.picketlink.idm.credential.Digest</code></entry>
              <entry>Used for digest-based authentication</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
              </entry>
            </row>
            <row>
              <entry><code>org.picketlink.idm.credential.Password</code></entry>
              <entry>A standard text-based password</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
                <code>LDAPIdentityStore</code>
              </entry>
            </row>
            <row>
              <entry><code>java.security.cert.X509Certificate</code></entry>
              <entry>Used for X509 certificate based authentication</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>             
              </entry>
            </row>
            <row>
              <entry><code>org.picketlink.idm.credential.TOTPCredential</code></entry>
              <entry>Used for Time-based One-time Password authentication</entry>
              <entry>
                <code>JPAIdentityStore</code>
                <code>FileBasedIdentityStore</code>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
           
      <para>
        Let's take a look at a couple of examples.  Here's some code demonstrating how a password can be assigned
        to user "jsmith":
      </para>
      
      <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jsmith");
identityManager.updateCredential(user, new Password("abcd1234"));]]></programlisting>

      <para>
        This example creates a digest and assigns it to user "jdoe":
      </para>
      
      <programlisting language="JAVA"><![CDATA[User user = BasicModel.getUser(identityManager, "jdoe");
Digest digest = new Digest();
digest.setRealm("default");
digest.setUsername(user.getLoginName());
digest.setPassword("abcd1234");        
identityManager.updateCredential(user, digest);]]></programlisting>
      
    </section>
    
    <section>
      <title>Credential Handlers</title>
      
      <para>
        For <code>IdentityStore</code> implementations that support multiple credential types, PicketLink provides
        an optional SPI to allow the default credential handling logic to be easily customized and extended. To get
        a better picture of the overall workings of the Credential Handler SPI, let's take a look at the sequence
        of events during the credential validation process when validating a username and password against
        <code>JPAIdentityStore</code>:
      </para>
      
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="diagrams/username_password_validation.png" align="center" scalefit="1"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="diagrams/username_password_validation.png" align="center"/>
        </imageobject>
      </mediaobject>       
      
     <itemizedlist>
        <listitem>
          <para>
            <emphasis>1</emphasis> -
            The user (or some other code) first invokes the <code>validateCredentials()</code> method on <code>IdentityManager</code>,
            passing in the <code>Credentials</code> instance to validate.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1</emphasis> -
            After looking up the correct <code>IdentityStore</code> (i.e. the one that has been configured to validate credentials)
            the <code>IdentityManager</code> invokes the store's <code>validateCredentials()</code> method, passing in the
            <code>SecurityContext</code> and the credentials to validate.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>1.1.1</emphasis> - 
            In <code>JPAIdentityStore</code>'s implementation of the <code>validateCredentials()</code> method, the 
            <code>SecurityContext</code> is used to look up the <code>CredentialHandler</code> implementation that has been 
            configured to process validation requests for usernames and passwords, which is then stored in a local variable
            called <code>handler</code>.
          </para>
        </listitem>
        <listitem>                
          <para>
            <emphasis>1.1.2</emphasis> -
            The <code>validate()</code> method is invoked on the <code>CredentialHandler</code>, passing in the security context,
            the credentials value and a reference back to the identity store.  The reference to the identity store is important
            as the credential handler may require it to invoke certain methods upon the store to validate the credentials.
          </para>
        </listitem>
      </itemizedlist>           
      
      <para>
        The <code>CredentialHandler</code> interface declares three methods, as follows:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public interface CredentialHandler {
    void setup(IdentityStore<?> identityStore);

    void validate(SecurityContext context, Credentials credentials, 
                  IdentityStore<?> identityStore);

    void update(SecurityContext context, Account account, Object credential,
                IdentityStore<?> identityStore, Date effectiveDate, Date expiryDate);

}]]></programlisting>

      <para>
        The <code>setup()</code> method is called once, when the <code>CredentialHandler</code> instance is first created. 
        Credential handler instantiation is controlled by the <code>CredentialHandlerFactory</code>, which creates a single
        instance of each <code>CredentialHandler</code> implementation to service all credential requests for that handler.
        Each <code>CredentialHandler</code> implementation must declare the types of credentials that it is capable of supporting,
        which is done by annotating the implementation class with the <code>@SupportsCredentials</code> annotation like so:
      </para>
    
      <programlisting language="JAVA"><![CDATA[@SupportsCredentials({ UsernamePasswordCredentials.class, Password.class })
public class PasswordCredentialHandler implements CredentialHandler {]]></programlisting>
  
      <para>
        Since the <code>validate()</code> and <code>update()</code> methods receive different parameter types (<code>validate()</code>
        takes a <code>Credentials</code> parameter value while <code>update()</code> takes an <code>Object</code> that represents
        a single credential value), the <code>@SupportsCredentials</code> annotation must contain a complete list of all types supported
        by that handler.
      </para>
      
      <para>
        Similarly, if the <code>IdentityStore</code> implementation makes use of the credential handler SPI then it also must declare
        which credential handlers support that identity store.  This is done using the <code>@CredentialHandlers</code> annotation; 
        for example, the following code shows how <code>JPAIdentityStore</code> is configured to be capable of handling credential
        requests for usernames and passwords, X509 certificates and digest-based authentication:
      </para>
      
      <programlisting language="JAVA"><![CDATA[@CredentialHandlers({ PasswordCredentialHandler.class,
          X509CertificateCredentialHandler.class, DigestCredentialHandler.class })
public class JPAIdentityStore implements IdentityStore<JPAIdentityStoreConfiguration>, 
                                         CredentialStore {]]></programlisting>
                                         
      <section>
        <title>The CredentialStore interface</title>
        
        <para>
          For <code>IdentityStore</code> implementations that support multiple credential types (such as <code>JPAIdentityStore</code>
          and <code>FileBasedIdentityStore</code>), the implementation may choose to also implement the <code>CredentialStore</code>
          interface to simplify the interaction between the <code>CredentialHandler</code> and the <code>IdentityStore</code>.  The
          <code>CredentialStore</code> interface declares methods for storing and retrieving credential values within an identity
          store, as follows:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public interface CredentialStore {
   void storeCredential(SecurityContext context, Account account,
                        CredentialStorage storage);
   <T extends CredentialStorage> T retrieveCurrentCredential(SecurityContext context, 
                                                 Account account, Class<T> storageClass);
   <T extends CredentialStorage> List<T> retrieveCredentials(SecurityContext context, 
                                                 Account account, Class<T> storageClass);
}]]></programlisting>

        <para>
          The <code>CredentialStorage</code> interface is quite simple and only declares two methods, <code>getEffectiveDate()</code>
          and <code>getExpiryDate()</code>:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public interface CredentialStorage {
   @Stored Date getEffectiveDate();
   @Stored Date getExpiryDate();
}]]></programlisting>

        <para>
          The most important thing to note above is the usage of the <code>@Stored</code> annotation.  This annotation is used to
          mark the properties of the <code>CredentialStorage</code> implementation that should be persisted.  The only requirement
          for any property values that are marked as <code>@Stored</code> is that they are serializable (i.e. they implement the
          <code>java.io.Serializable</code> interface).  The <code>@Stored</code> annotation may be placed on either the getter 
          method or the field variable itself.  Here's an example of one of a <code>CredentialStorage</code> implementation that
          is built into PicketLink - <code>EncodedPasswordStorage</code> is used to store a password hash and salt value:
        </para>
        
        <programlisting language="JAVA"><![CDATA[public class EncodedPasswordStorage implements CredentialStorage {

    private Date effectiveDate;
    private Date expiryDate;
    private String encodedHash;
    private String salt;

    @Override @Stored
    public Date getEffectiveDate() {
        return effectiveDate;
    }

    public void setEffectiveDate(Date effectiveDate) {
        this.effectiveDate = effectiveDate;
    }

    @Override @Stored
    public Date getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    @Stored
    public String getEncodedHash() {
        return encodedHash;
    }

    public void setEncodedHash(String encodedHash) {
        this.encodedHash = encodedHash;
    }

    @Stored
    public String getSalt() {
        return this.salt;
    }

    public void setSalt(String salt) {
        this.salt = salt;
    }

}]]></programlisting>
      
      </section>

    </section>
    
    <section>
      <title>Built-in Credential Handlers</title>
     
      <para>
        This section describes each of the built-in credential handlers, and any configuration parameters that may be set for them.
        Specific credential handler options can be set when creating a new <code>IdentityConfiguration</code>.  Configured options 
        are always specific to a particular identity store configuration, allowing different options to be specified between two or
        more identity stores.  The <code>IdentityStoreConfiguration</code> interface provides a method called
        <code>getCredentialHandlersConfig()</code> that provides access to a <code>Map</code> which allows configuration options
        to be set for the identity store's credential handlers:
      </para>
      
      <programlisting language="JAVA"><![CDATA[public interface IdentityStoreConfiguration {
    Map<String, Object> getCredentialHandlerProperties();
}]]></programlisting>

      <para>
        To gain access to the <code>IdentityStoreConfiguration</code> object before PicketLink is initialized, there are a couple of
        options.  The first option is to provide an <code>IdentityConfiguration</code> object itself via a producer method.
      </para>

    </section>

    <section>
      <title>Credentials for Custom <code>Account</code> Types</title>

      <para>
        The built-in credential handlers can be used without any specific configuration if you're using the basic identity model. But in certain cases you may
        want to provide your own <code>Account</code> type and get it able to be authenticated.
      </para>

      <para>
        Custom types require some additional steps in order to get their credentials updated/validated. Basically, what you need to do is:
      </para>

      <itemizedlist>
        <listitem>Extend one of the built-in credential handler types</listitem>
        <listitem>Override the <code>getAccount(final IdentityContext context, final UsernamePasswordCredentials credentials)</code> method in order to retrieve
        your custom type instance.</listitem>
        <listitem>Configure your custom handler using the <link linkend='configuring_credential_handlers'>PicketLink IDM Configuration API</link></listitem>
      </itemizedlist>

      <para>
        As an example, let's suppose we have a custom <code>Account</code> type named <code>SalesAgent</code> and the application must support password-based authentication for this type:
      </para>

      <programlisting language="JAVA"><![CDATA[ public class UserPasswordCredentialHandler extends PasswordCredentialHandler {

    @Override
    protected Account getAccount(final IdentityContext context, final UsernamePasswordCredentials credentials) {
      IdentityManager identityManager = getIdentityManager(context);
      IdentityQuery<SalesAgent> query = identityManager.createIdentityQuery(SalesAgent.class);

      query.setParameter(SalesAgent.LOGIN_NAME, credentials.getUsername());

      List<SalesAgent> result = query.getResultList();

      if (result.isEmpty()) {
        return null;
      }

      return result.get(0);
    }
}]]></programlisting>

      <warning>
        <para>
          If you're using a custom <code>Account</code> type and trying to authenticate using this type without providing a specific credential handler, the authentication will always fail.
        </para>
      </warning>

    </section>
    
</chapter>
