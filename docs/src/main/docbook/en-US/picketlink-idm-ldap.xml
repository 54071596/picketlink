<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook"
         id="picketlink-idm-ldap">
  <title>Identity Management - Working with LDAP</title>

      <section>
        <title>LDAPIdentityStoreConfiguration</title>

        <para>
          The LDAP identity store allows an LDAP directory server to be used to provide identity state. You can use this store in read-only or write-read mode, depending on your permissions on the server.
        </para>

        <section>
          <title>Configuration</title>

          <para>
            The LDAP identity store can be configured by providing the following configuration:
          </para>

          <programlisting language="JAVA"><![CDATA[IdentityConfigurationBuilder builder = new IdentityConfigurationBuilder();

builder
    .named("ldap.config")
        .stores()
            .ldap()
                .baseDN("dc=jboss,dc=org")
                .bindDN("uid=admin,ou=system")
                .bindCredential("passwd")
                .url("ldap://localhost:389")
                .supportType(IdentityType.class)
                .supportGlobalRelationship(Grant.class, GroupMembership.class)
                .mapping(Agent.class)
                    .baseDN("ou=Agent,dc=jboss,dc=org")
                    .objectClasses("account")
                    .attribute("loginName", UID, true)
                    .readOnlyAttribute("createdDate", CREATE_TIMESTAMP)
                .mapping(User.class)
                    .baseDN("ou=User,dc=jboss,dc=org")
                    .objectClasses("inetOrgPerson", "organizationalPerson")
                    .attribute("loginName", UID, true)
                    .attribute("firstName", CN)
                    .attribute("lastName", SN)
                    .attribute("email", EMAIL)
                    .readOnlyAttribute("createdDate", CREATE_TIMESTAMP)
                .mapping(Role.class)
                    .baseDN("ou=Roles,dc=jboss,dc=org")
                    .objectClasses(GROUP_OF_NAMES)
                    .attribute("name", CN, true)
                    .readOnlyAttribute("createdDate", CREATE_TIMESTAMP)
                .mapping(Group.class)
                    .baseDN("ou=Groups,dc=jboss,dc=org")
                    .objectClasses(GROUP_OF_NAMES)
                    .attribute("name", CN, true)
                    .readOnlyAttribute("createdDate", CREATE_TIMESTAMP)
                    .parentMembershipAttributeName("member")
                .mapping(Grant.class)
                    .forMapping(Role.class)
                    .attribute("assignee", "member")
                .mapping(GroupMembership.class)
                    .forMapping(Group.class)
                    .attribute("member", "member");]]></programlisting>

          <para>
            The following table describes all configuration options:
          </para>

          <table>
            <title>LDAP Configuration Options</title>
            <tgroup cols="2" align="left">
              <thead>
                <row>
                  <entry>Option</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><code>baseDN</code></entry>
                  <entry>Sets the base DN for a specific mapped type or all types.</entry>
                </row>
                <row>
                  <entry><code>bindDN</code></entry>
                  <entry>Sets the the DN used to bind against the ldap server. If you want to perform write operations the DN must have permissions on the agent,user,role and group contexts.</entry>
                </row>
                <row>
                  <entry><code>bindCredential</code></entry>
                  <entry>Sets the password for the bindDN.</entry>
                </row>
                <row>
                  <entry><code>url</code></entry>
                  <entry>Sets the url that should be used to connect to the server. Eg.: <![CDATA[ldap://<<server>>:389]]>.</entry>
                </row>
                <row>
                  <entry><code>mapping</code></entry>
                  <entry>Defines a set of mapping options for a specific type.</entry>
                </row>
                <row>
                  <entry><code>objectClasses</code></entry>
                  <entry>Defines the objectClasses that should be used by entries of a specific type.</entry>
                </row>
                <row>
                  <entry><code>attribute</code></entry>
                  <entry>Defines the mapping between a type property and its corresponding LDAP attribute.</entry>
                </row>
                <row>
                  <entry><code>forMapping</code></entry>
                  <entry>Defines that a specific type is related with another mapped type. Useful when mapping relationships.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <section>
            <title>Mapping Groups to different contexts</title>

            <para>
              Sometimes may be useful to map a specific group to a specific context or DN.
            </para>

            <para>
              The following configuration maps the group with path <emphasis>/QA Group</emphasis> to <emphasis>ou=QA,ou=Groups,dc=jboss,dc=org</emphasis>
            </para>

            <programlisting language="JAVA"><![CDATA[mapping(Group.class)
  .baseDN(embeddedServer.getGroupDnSuffix())
  .objectClasses(GROUP_OF_NAMES)
  .attribute("name", CN, true)
  .readOnlyAttribute("createdDate", CREATE_TIMESTAMP)
  .parentMembershipAttributeName("member")
  .parentMapping("QA Group", "ou=QA,ou=Groups,dc=jboss,dc=org")]]></programlisting>

            <para>
              With this configuration you can have groups with the same name, but with different paths.
            </para>

            <programlisting language="JAVA"><![CDATA[IdentityManager identityManager = getIdentityManager();
Group managers = new SimpleGroup("managers");      

identityManager.add(managers); // group's path is /manager 
                  
Group qaGroup = identityManager.getGroup("QA Group");        
Group managersQA = new SimpleGroup("managers", qaGroup);

// the QA Group is mapped to a different DN.
Group qaManagerGroup = identityManager.add(managersQA); // group's path is /QA Group/managers]]></programlisting>                
          </section>            
        </section>
      </section>

</chapter>
